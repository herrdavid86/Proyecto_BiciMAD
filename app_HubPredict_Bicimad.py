import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pydeck as pdk
from datetime import datetime, timedelta, date
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image

import folium
from streamlit_folium import st_folium
import geopy.distance
import streamlit.components.v1 as components

# --- Importaciones de Modelos ---
import joblib
from category_encoders import TargetEncoder
import lightgbm as lgb
import requests

# --- Constantes de ubicaci√≥n por defecto (Madrid) ---
LATITUDE_MADRID = 40.4168
LONGITUDE_MADRID = -3.7038

# --- Power BI Embed Link ---
power_bi_embed_code = """
<iframe title="ProyectoBiciMad" width="100%" height="600" src="https://app.powerbi.com/reportEmbed?reportId=af0e6ac1-610d-477d-b86c-bde5f520e273&autoAuth=true&ctid=ae32eec6-145a-4167-8a63-02cea1138fe3&navContentPaneEnabled=false" frameborder="0" allowFullScreen="true"></iframe>
"""

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="HubPredict BiciMAD",
    layout="wide",
    page_icon="üö¥‚Äç‚ôÇÔ∏è",
    initial_sidebar_state="expanded"
)

# CSS personalizado mejorado
st.markdown("""
<style>
        .main-header {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            color: white;
            text-align: center;
        }

        .prediction-container {
            background: #f8f9fa;
            padding: 0.5rem 1.5rem; /* Reducido dr√°sticamente el padding vertical */
            border-radius: 10px;
            border-left: 4px solid #667eea;
            margin: 0.2rem 0; /* Reducido el margen externo */
            /* A√±adir overflow para asegurar que el contenido no desborde si se hace muy peque√±o */
            overflow: hidden;
        }

        /* Estilos para el t√≠tulo h4 dentro de .prediction-container */
        .prediction-container h4 {
            margin-top: 0.3rem !important; /* M√°s agresivo con !important */
            margin-bottom: 0.3rem !important; /* M√°s agresivo con !important */
            font-size: 1.3rem; /* Ligeramente m√°s peque√±o */
            line-height: 1.2; /* Compacta la altura de l√≠nea */
        }

        /* Estilos para los p√°rrafos p dentro de .prediction-container */
        .prediction-container p {
            margin-bottom: 0.1rem !important; /* M√°rgenes muy peque√±os */
            margin-top: 0.1rem !important;
            font-size: 0.9rem; /* Opcional: un poco m√°s peque√±a la fuente del texto */
            line-height: 1.3; /* Compacta la altura de l√≠nea */
        }

        /* Intento m√°s directo a los contenedores generados por Streamlit para el markdown */
        /* Puede que los divs directamente encima de nuestro HTML inyectado tengan padding */
        .stMarkdown, .stMarkdown > div, .stMarkdown > div > div {
            padding-top: 0 !important;
            padding-bottom: 0 !important;
            margin-top: 0 !important;
            margin-bottom: 0 !important;
        }

        .desenganche { border-left: 4px solid #dc3545; }
        .enganche { border-left: 4px solid #28a745; }
        .ambas { border-left: 4px solid #ffc107; }

        .station-search {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }

        .nearby-stations {
            background: #e7f3ff;
            padding: 0.8rem;
            border-radius: 6px;
            margin: 0.5rem 0;
            font-size: 0.9em;
        }

        .metric-card {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
            border-left: 4px solid #667eea;
        }

        .prediction-table {
            background: white;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin: 1rem 0;
        }

        .demand-high { color: #dc3545; font-weight: bold; }
        .demand-medium { color: #ffc107; font-weight: bold; }
        .demand-low { color: #28a745; font-weight: bold; }

        .tab-content {
            padding: 1rem 0;
        }

        /* Nuevo estilo para el recuadro de Power BI */
        .powerbi-container {
            background: white;
            padding: 1rem;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1rem;
            border: 1px solid #e0e0e0; /* Un borde sutil para el recuadro */
        }
    </style>
    """, unsafe_allow_html=True)

# Header principal
st.markdown("""
<div class="main-header">
    <h1>üö¥‚Äç‚ôÇÔ∏è HubPredict - BiciMAD </h1>
    <p>Sistema inteligente para predicci√≥n de enganches y desenganches en estaciones de Madrid</p>
</div>
""", unsafe_allow_html=True)

# --- Cargar modelos y encoders con cach√© ---
@st.cache_resource
def load_ml_assets():
    try:
        encoder_plug = joblib.load('encoder_plug.pkl')
        model_plug = joblib.load('model_plug_lgbm.pkl')
        encoder_unplug = joblib.load('encoder_unplug.pkl')
        model_unplug = joblib.load('model_unplug_lgbm.pkl')
        st.success("Modelos y encoders cargados exitosamente.")
        return encoder_plug, model_plug, encoder_unplug, model_unplug
    except FileNotFoundError as e:
        st.error(f"Error al cargar archivos del modelo. Aseg√∫rate de que 'encoder_plug.pkl', 'model_plug_lgbm.pkl', 'encoder_unplug.pkl', y 'model_unplug_lgbm.pkl' est√©n en la misma carpeta que la app. Detalle: {e}")
        st.stop()
    except Exception as e:
        st.error(f"Error inesperado al cargar los activos de ML: {e}")
        st.stop()

encoder_plug, model_plug, encoder_unplug, model_unplug = load_ml_assets()

# Simulaci√≥n de datos de estaciones con coordenadas
@st.cache_data
def load_stations_data():
    """Cargar datos de estaciones desde estaciones_bicimad.csv"""
    try:
        df_stations = pd.read_csv("data/estaciones_bicimad.csv")
        
        stations_data = {}
        for index, row in df_stations.iterrows():
            stations_data[row['name']] = {
                'lat': row['latitude'],
                'lon': row['longitude'],
                'id': row['id'],
                'max_capacity': row.get('max_capacity', 24) # Asume 24 si no est√° la columna
            }
        return stations_data
    except FileNotFoundError:
        st.error("Error: El archivo 'estaciones_bicimad.csv' no se encontr√≥ en la carpeta 'data/'.")
        st.stop()
    except KeyError as e:
        st.error(f"Error: Una columna esperada no se encontr√≥ en 'estaciones_bicimad.csv'. Falta la columna: {e}")
        st.stop()
    except Exception as e:
        st.error(f"Ocurri√≥ un error al cargar los datos de las estaciones: {e}")
        st.stop()

# --- Funci√≥n mejorada para obtener pron√≥stico meteorol√≥gico para varias horas ---
@st.cache_data(ttl=3600) # Cach√© por 1 hora
def get_future_weather_forecast_for_day(latitude, longitude, target_date):
    date_str = target_date.strftime('%Y-%m-%d')
    url = (f"https://api.open-meteo.com/v1/forecast?"
           f"latitude={latitude}&longitude={longitude}&"
           f"hourly=temperature_2m,precipitation&"
           f"start_date={date_str}&end_date={date_str}&"
           f"timezone=Europe%2FBerlin") # Zona horaria de Madrid

    try:
        response = requests.get(url, timeout=10) # A√±adir timeout
        response.raise_for_status() # Lanza excepci√≥n para c√≥digos de error HTTP
        data = response.json()
        hourly_data = data.get('hourly', {})

        if not hourly_data or not hourly_data.get('time'):
            st.warning(f"No se encontraron datos horarios para la fecha {date_str}.")
            return pd.DataFrame()

        df = pd.DataFrame({
            'time': pd.to_datetime(hourly_data.get('time', [])),
            'temperature_2m': hourly_data.get('temperature_2m', []),
            'precipitation': hourly_data.get('precipitation', [])
        })
        df['hour'] = df['time'].dt.hour
        return df[['hour', 'temperature_2m', 'precipitation']]
    except requests.exceptions.Timeout:
        st.error("La solicitud a la API del clima ha tardado demasiado. Intenta de nuevo m√°s tarde.")
        return pd.DataFrame()
    except requests.exceptions.RequestException as e:
        st.error(f"Error al obtener datos de pron√≥stico del tiempo: {e}")
        return pd.DataFrame()


# --- Nueva funci√≥n de predicci√≥n REAL con modelos ---
@st.cache_data # Cach√© de predicciones basado en inputs
def predict_demand_real(station_id, target_date, target_hour, prediction_type,
                        _encoder_plug_model, _model_plug_model,
                        _encoder_unplug_model, _model_unplug_model,
                        weather_data_df):
    
    # 1. Preparar datos de entrada base
    is_weekend = 1 if target_date.weekday() in [5, 6] else 0

    # Obtener clima para la hora espec√≠fica o la m√°s cercana
    temp = 20.0 # Valor por defecto si no se encuentra nada
    prec = 0.0  # Valor por defecto si no se encuentra nada
    
    if not weather_data_df.empty:
        # Intentar obtener la hora exacta
        weather_row = weather_data_df[weather_data_df['hour'] == target_hour]
        
        if not weather_row.empty:
            temp = weather_row['temperature_2m'].iloc[0]
            prec = weather_row['precipitation'].iloc[0]
        else:
            # Si no se encuentra la hora exacta, buscar la m√°s cercana
            # Calcular la diferencia absoluta de horas
            weather_data_df['hour_diff'] = abs(weather_data_df['hour'] - target_hour)
            # Encontrar la fila con la m√≠nima diferencia
            closest_weather_row = weather_data_df.loc[weather_data_df['hour_diff'].idxmin()]
            
            temp = closest_weather_row['temperature_2m']
            prec = closest_weather_row['precipitation']
            st.warning(f"No se encontr√≥ pron√≥stico para la hora {target_hour:02d}:00. Usando el clima de la hora m√°s cercana ({closest_weather_row['hour']:02d}:00).")
    else:
        st.warning("No se pudieron obtener datos del pron√≥stico del tiempo. Usando valores predeterminados para la predicci√≥n.")

    data_point = pd.DataFrame([{
        'station_id': station_id,
        'dia': target_date.day,
        'mes': target_date.month,
        'a√±o': target_date.year,
        'dia_semana': target_date.weekday(),
        'hour': target_hour,
        'Valor_Temp': temp,
        'Valor_Prec': prec,
        'dia_especial': is_weekend
    }])

    # 2. Definir columnas categ√≥ricas para el Target Encoding (6 columnas)
    categorical_cols_for_encoder = ['station_id', 'dia', 'mes', 'hour', 'a√±o', 'dia_semana']

    # 3. Seleccionar encoder y modelo seg√∫n el tipo de predicci√≥n
    if prediction_type == "Desenganche":
        encoder = _encoder_unplug_model
        model = _model_unplug_model
    elif prediction_type == "Enganche":
        encoder = _encoder_plug_model
        model = _model_plug_model
    else:
        raise ValueError("Tipo de predicci√≥n no v√°lido. Debe ser 'Desenganche' o 'Enganche'.")

    # 4. Aplicar Target Encoding
    df_to_encode = data_point[categorical_cols_for_encoder].copy()
    encoded_features = encoder.transform(df_to_encode)
    
    df_encoded = pd.DataFrame(encoded_features, columns=categorical_cols_for_encoder, index=data_point.index)

    # 5. Combinar features codificadas con las no codificadas
    final_features_for_model = [
        'station_id', 'dia', 'mes', 'hour', 'a√±o', 'dia_semana',
        'Valor_Temp', 'Valor_Prec', 'dia_especial'
    ]
    
    final_input_df = df_encoded.copy()
    final_input_df['Valor_Temp'] = data_point['Valor_Temp']
    final_input_df['Valor_Prec'] = data_point['Valor_Prec']
    final_input_df['dia_especial'] = data_point['dia_especial']

    final_input_df = final_input_df[final_features_for_model]

    # 6. Realizar la predicci√≥n
    predicted_count_raw = model.predict(final_input_df)
    predicted_count_rounded = np.round(predicted_count_raw[0])
    
    return max(0, int(predicted_count_rounded))

def get_demand_level(demand):
    """Clasificar nivel de demanda (para el color, no para texto en gr√°fico)"""
    if demand >= 30:
        return "Alta", "demand-high"
    elif demand >= 15:
        return "Media", "demand-medium"
    else:
        return "Baja", "demand-low"

def find_nearby_stations(user_location, stations_data, radius_km=2):
    """Encontrar estaciones cercanas a la ubicaci√≥n del usuario"""
    nearby = []
    for name, data in stations_data.items():
        distance = geopy.distance.distance(
            user_location,
            (data['lat'], data['lon'])
        ).kilometers

        if distance <= radius_km:
            nearby.append({
                'name': name,
                'distance': round(distance, 2),
                'lat': data['lat'],
                'lon': data['lon']
            })

    return sorted(nearby, key=lambda x: x['distance'])

def create_stations_map(stations_data, selected_stations=None):
    """Crear mapa con estaciones y ajustar el zoom para ver todas las estaciones."""

    lats = []
    lons = []
    for name, data in stations_data.items():
        lats.append(data['lat'])
        lons.append(data['lon'])

    if lats and lons:
        min_lat, max_lat = min(lats), max(lats)
        min_lon, max_lon = min(lons), max(lons)
        
        center_lat = (min_lat + max_lat) / 2
        center_lon = (min_lon + max_lon) / 2
    else:
        center_lat, center_lon = 40.4168, -3.7038
        min_lat, max_lat, min_lon, max_lon = center_lat - 0.01, center_lat + 0.01, center_lon - 0.01, center_lon + 0.01


    m = folium.Map(location=[center_lat, center_lon], zoom_start=12)

    selected_stations_list = selected_stations if selected_stations is not None else []

    for name, data in stations_data.items():
        color = 'red' if name in selected_stations_list else 'blue'
        icon = 'star' if name in selected_stations_list else 'bicycle'

        folium.Marker(
            location=[data['lat'], data['lon']],
            popup=f"<b>{name}</b><br>ID: {data['id']}<br>Lat: {data['lat']}<br>Lon: {data['lon']}<br>Capacidad Max: {data['max_capacity']}",
            tooltip=name,
            icon=folium.Icon(color=color, icon=icon, prefix='fa', icon_size=(25, 25))
        ).add_to(m)

    if lats and lons:
        m.fit_bounds([[min_lat, min_lon], [max_lat, max_lon]])

    return m

# Cargar datos
stations_data = load_stations_data()
station_names = list(stations_data.keys())

# Layout principal
col1, col2 = st.columns([1, 2])

with col1:
    st.markdown("### üìã Par√°metros de Predicci√≥n")

    # Selector de tipo de predicci√≥n
    st.markdown("#### üéØ Tipo de Predicci√≥n")
    prediction_type = st.radio(
        "Selecciona qu√© quieres predecir:",
        ["Desenganche", "Enganche", "Ambas"],
        help="‚Ä¢ **Desenganche**: Bicicletas que salen de la estaci√≥n\n‚Ä¢ **Enganche**: Bicicletas que llegan a la estaci√≥n\n‚Ä¢ **Ambas**: Predicci√≥n completa"
    )

    # Selector de estaci√≥n mejorado
    st.markdown("#### üöâ Selecci√≥n de Estaci√≥n")

    search_option = st.selectbox(
        "M√©todo de selecci√≥n:",
        ["Lista desplegable", "B√∫squeda por nombre", "Estaciones cercanas"]
    )

    selected_station_for_desenganche = None
    selected_station_for_enganche = None
    selected_station_single = None

    if prediction_type == "Ambas":
        st.markdown("#### Selecciona Estaciones Espec√≠ficas para 'Ambas'")

        selected_station_for_desenganche = st.selectbox(
            "Estaci√≥n para **Desenganche**:",
            station_names,
            key="desenganche_station_selector",
            help="Selecciona la estaci√≥n para la cual predecir desenganches."
        )

        selected_station_for_enganche = st.selectbox(
            "Estaci√≥n para **Enganche**:",
            station_names,
            key="enganche_station_selector",
            index=min(1, len(station_names) - 1),
            help="Selecciona la estaci√≥n para la cual predecir enganches."
        )

        selected_stations_for_map = []
        if selected_station_for_desenganche:
            selected_stations_for_map.append(selected_station_for_desenganche)
        if selected_station_for_enganche and selected_station_for_enganche not in selected_stations_for_map:
            selected_stations_for_map.append(selected_station_for_enganche)

    else: # Si el tipo de predicci√≥n es "Desenganche" o "Enganche" individual
        if search_option == "Lista desplegable":
            selected_station_single = st.selectbox(
                "Estaci√≥n:",
                station_names,
                key="single_station_list",
                help="Selecciona una estaci√≥n de la lista."
            )

        elif search_option == "B√∫squeda por nombre":
            search_text = st.text_input(
                "Buscar estaci√≥n:",
                placeholder="Escribe el nombre de la estaci√≥n...",
                key="single_station_search_text"
            )

            if search_text:
                filtered_stations = [s for s in station_names if search_text.lower() in s.lower()]

                if filtered_stations:
                    selected_station_single = st.selectbox(
                        "Estaciones encontradas:",
                        filtered_stations,
                        key="single_station_found"
                    )
                else:
                    st.warning("No se encontraron estaciones con ese nombre")

        elif search_option == "Estaciones cercanas":
            st.info("üìç Solicitando tu ubicaci√≥n actual... Por favor, permite el acceso en tu navegador.")

            _component_func = components.declare_component(
                "geolocation_component",
                path="./components",
            )

            location_data = _component_func(key="user_geolocation")

            user_location = None

            if location_data:
                if "latitude" in location_data and "longitude" in location_data:
                    lat = location_data["latitude"]
                    lon = location_data["longitude"]
                    user_location = (lat, lon)
                    st.success(f"Ubicaci√≥n obtenida: Latitud {lat:.4f}, Longitud {lon:.4f}")
                    st.write(f"Buscando estaciones cercanas a: ({lat:.4f}, {lon:.4f})")
                elif "error" in location_data:
                    st.error(f"Error al obtener la ubicaci√≥n: {location_data['error']}")
                    st.warning("Usando ubicaci√≥n predeterminada (centro de Madrid).")
                    user_location = (LATITUDE_MADRID, LONGITUDE_MADRID)
            else:
                st.warning("Esperando la ubicaci√≥n... Aseg√∫rate de permitir el acceso en tu navegador.")
                user_location = (LATITUDE_MADRID, LONGITUDE_MADRID)

            if user_location:
                nearby_stations = find_nearby_stations(user_location, stations_data, radius_km=1.5)

                if nearby_stations:
                    st.markdown("**Estaciones cercanas (dentro de 1.5 km):**")
                    station_options = [f"{s['name']} ({s['distance']} km)" for s in nearby_stations]
                    selected_option = st.selectbox("Estaciones cercanas:", station_options, key="single_station_nearby")
                    if selected_option:
                        selected_station_single = selected_option.split(" (")[0]
                else:
                    st.warning("No hay estaciones cercanas en el radio especificado con tu ubicaci√≥n actual o la predeterminada.")
            else:
                st.warning("No se pudo determinar la ubicaci√≥n del usuario para buscar estaciones cercanas.")
                selected_station_single = None


        selected_stations_for_map = [selected_station_single] if selected_station_single else []


    # Condici√≥n para mostrar fecha, hora, rango y bot√≥n
    can_predict = False
    if prediction_type == "Ambas":
        if selected_station_for_desenganche and selected_station_for_enganche:
            can_predict = True
    else: # Desenganche o Enganche individual
        if selected_station_single:
            can_predict = True

    predict_button = False
    if can_predict:
        st.markdown("#### üìÖ Fecha y Hora")

        max_date = date.today() + timedelta(days=15)
        selected_date = st.date_input(
            "Fecha:",
            value=date.today() + timedelta(days=1),
            min_value=date.today(),
            max_value=max_date,
            key="prediction_date"
        )

        selected_hour = st.selectbox(
            "Hora:",
            range(24),
            format_func=lambda x: f"{x:02d}:00",
            index=9,
            key="prediction_hour"
        )

        # Selector de rango de horas
        st.markdown("#### ‚è∞ Rango de Predicci√≥n")
        hour_range = st.selectbox(
            "N√∫mero de horas a mostrar:",
            [3, 5, 7],
            index=1,
            help="Muestra predicciones para N horas centradas en la hora seleccionada",
            key="hour_range_selector"
        )
        
        # Bot√≥n de predicci√≥n
        predict_button = st.button(
            "üîÆ Generar Predicci√≥n",
            type="primary",
            use_container_width=True
        )
        
        # --- Mover este bloque aqu√≠, debajo del bot√≥n de predicci√≥n ---
        st.markdown("#### üö≤ Capacidad de la Estaci√≥n")
        if prediction_type == "Ambas":
            if selected_station_for_desenganche:
                cap_des = stations_data[selected_station_for_desenganche]['max_capacity']
                st.info(f"**Desenganche:** {selected_station_for_desenganche} - Capacidad M√°x: **{cap_des}** bicis")
            if selected_station_for_enganche:
                cap_eng = stations_data[selected_station_for_enganche]['max_capacity']
                st.info(f"**Enganche:** {selected_station_for_enganche} - Capacidad M√°x: **{cap_eng}** bicis")
        else:
            if selected_station_single:
                cap_single = stations_data[selected_station_single]['max_capacity']
                st.info(f"Capacidad M√°x. de {selected_station_single}: **{cap_single}** bicis")
        
        st.caption("*(Este es el n√∫mero de bases que tiene la estaci√≥n, no la cantidad de bicicletas disponibles en tiempo real.)*")
        # --- Fin del bloque a mover ---

    else: # Si no se puede predecir
        if prediction_type == "Ambas":
            st.warning("Selecciona una estaci√≥n para desenganche y otra para enganche para generar la predicci√≥n.")
        else:
            st.warning("Selecciona una estaci√≥n para continuar con la predicci√≥n.")


with col2:
    st.markdown("### üìä Resultados y Visualizaci√≥n")

    # El mapa siempre se muestra
    st.markdown("### üó∫Ô∏è Ubicaci√≥n de Estaciones")
    if selected_stations_for_map:
        stations_map = create_stations_map(stations_data, selected_stations=selected_stations_for_map)
        st_folium(stations_map, width=700, height=400)
    else:
        st.info("Selecciona una estaci√≥n en la columna izquierda para verla en el mapa.")
        # Si no hay selecci√≥n, mostrar un mapa general
        stations_map_general = create_stations_map(stations_data)
        st_folium(stations_map_general, width=700, height=400)


    # Resultados de predicci√≥n (solo se muestra si el bot√≥n de predicci√≥n fue presionado)
    if predict_button:
        with st.spinner("‚è≥ Predicci√≥n en curso... Esto puede tomar unos segundos mientras los modelos analizan los datos."):
            # Calcular rango de horas
            half_range = hour_range // 2
            hours_to_predict = []

            for i in range(-half_range, half_range + 1):
                hour = (selected_hour + i) % 24
                hours_to_predict.append(hour)
            
            # --- Obtener datos meteorol√≥gicos para TODAS las horas del d√≠a ---
            if prediction_type == "Ambas":
                weather_lat = stations_data.get(selected_station_for_desenganche, {'lat': LATITUDE_MADRID})['lat']
                weather_lon = stations_data.get(selected_station_for_desenganche, {'lon': LONGITUDE_MADRID})['lon']
            else:
                weather_lat = stations_data.get(selected_station_single, {'lat': LATITUDE_MADRID})['lat']
                weather_lon = stations_data.get(selected_station_single, {'lon': LONGITUDE_MADRID})['lon']

            weather_forecast_df = get_future_weather_forecast_for_day(weather_lat, weather_lon, selected_date)

            # Informaci√≥n de la consulta unificada y mejorada
            st.markdown(f"""
            <div class="prediction-container">
                <h4>üéØ Consulta Realizada ({prediction_type})</h4>
            """, unsafe_allow_html=True)

            station_info_text = "<strong>Estaci√≥n(es):</strong> "
            if prediction_type == 'Ambas':
                if selected_station_for_desenganche:
                    station_info_text += f"Desenganche: {selected_station_for_desenganche}"
                if selected_station_for_enganche:
                    if selected_station_for_desenganche:
                        station_info_text += " - "
                    station_info_text += f"Enganche: {selected_station_for_enganche}"
            else:
                if selected_station_single:
                    station_info_text += selected_station_single

            st.markdown(f"<p>{station_info_text}</p>", unsafe_allow_html=True)

            st.markdown(f"""
                <p>
                    <strong>Fecha:</strong> {selected_date.strftime('%d/%m/%Y')} ({selected_date.strftime('%A')})
                    &nbsp;&nbsp;-&nbsp;&nbsp;
                    <strong>Hora objetivo:</strong> {selected_hour:02d}:00
                </p>
            </div>
            """, unsafe_allow_html=True)

            if prediction_type == "Ambas":
                tab_desenganche, tab_enganche = st.tabs(["üî¥ Desenganche", "üü¢ Enganche"])

                with tab_desenganche:
                    if selected_station_for_desenganche:
                        st.markdown(f"#### Predicciones de Desenganche para: {selected_station_for_desenganche}")
                        predictions_des = []
                        station_id_des = stations_data[selected_station_for_desenganche]['id']
                        for hour in hours_to_predict:
                            demand = predict_demand_real(
                                station_id_des, selected_date, hour, "Desenganche",
                                encoder_plug, model_plug, encoder_unplug, model_unplug,
                                weather_forecast_df
                            )
                            # Eliminamos el nivel de demanda de aqu√≠, solo el valor num√©rico
                            predictions_des.append({
                                'Hora': f"{hour:02d}:00",
                                'Demanda': demand,
                                'Tipo': 'üéØ Objetivo' if hour == selected_hour else 'üìç Referencia'
                            })

                        df_des = pd.DataFrame(predictions_des)
                        # Eliminar la columna 'Nivel' si existe
                        if 'Nivel' in df_des.columns:
                            df_des = df_des.drop(columns=['Nivel'])
                        st.dataframe(df_des, use_container_width=True, hide_index=True)

                        fig_des = go.Figure()
                        # Nuevos colores BiciMAD
                        color_target_des = '#0047AB' # Azul m√°s oscuro para objetivo
                        color_reference_des = '#ADD8E6' # Azul claro para referencia
                        colors_des = [color_target_des if p['Tipo'] == 'üéØ Objetivo' else color_reference_des for p in predictions_des]

                        fig_des.add_trace(go.Bar(
                            x=[p['Hora'] for p in predictions_des],
                            y=[p['Demanda'] for p in predictions_des],
                            marker_color=colors_des,
                            name='Desenganche',
                            text=[f"{p['Demanda']}" for p in predictions_des], # Eliminado el texto de Nivel
                            textposition='auto',
                            textfont=dict(size=14) # Tama√±o de fuente ligeramente m√°s grande
                        ))

                        fig_des.update_layout(
                            title=f"Desenganches - {selected_station_for_desenganche}",
                            xaxis_title="Hora",
                            yaxis_title="Desenganches Estimados",
                            height=400
                        )

                        st.plotly_chart(fig_des, use_container_width=True)
                    else:
                        st.info("No se seleccion√≥ estaci√≥n para Desenganche.")

                with tab_enganche:
                    if selected_station_for_enganche:
                        st.markdown(f"#### Predicciones de Enganche para: {selected_station_for_enganche}")
                        predictions_eng = []
                        station_id_eng = stations_data[selected_station_for_enganche]['id']
                        for hour in hours_to_predict:
                            demand = predict_demand_real(
                                station_id_eng, selected_date, hour, "Enganche",
                                encoder_plug, model_plug, encoder_unplug, model_unplug,
                                weather_forecast_df
                            )
                            # Eliminamos el nivel de demanda de aqu√≠
                            predictions_eng.append({
                                'Hora': f"{hour:02d}:00",
                                'Demanda': demand,
                                'Tipo': 'üéØ Objetivo' if hour == selected_hour else 'üìç Referencia'
                            })

                        df_eng = pd.DataFrame(predictions_eng)
                        # Eliminar la columna 'Nivel' si existe
                        if 'Nivel' in df_eng.columns:
                            df_eng = df_eng.drop(columns=['Nivel'])
                        st.dataframe(df_eng, use_container_width=True, hide_index=True)

                        fig_eng = go.Figure()
                        # Nuevos colores BiciMAD para enganche (verde BiciMAD si aplica, o tonos azules)
                        color_target_eng = '#0047AB' # Azul m√°s oscuro para objetivo
                        color_reference_eng = '#87CEEB' # Azul cielo para referencia (o un verde si prefieres)
                        colors_eng = [color_target_eng if p['Tipo'] == 'üéØ Objetivo' else color_reference_eng for p in predictions_eng]

                        fig_eng.add_trace(go.Bar(
                            x=[p['Hora'] for p in predictions_eng],
                            y=[p['Demanda'] for p in predictions_eng],
                            marker_color=colors_eng,
                            name='Enganche',
                            text=[f"{p['Demanda']}" for p in predictions_eng], # Eliminado el texto de Nivel
                            textposition='auto',
                            textfont=dict(size=14) # Tama√±o de fuente ligeramente m√°s grande
                        ))

                        fig_eng.update_layout(
                            title=f"Enganches - {selected_station_for_enganche}",
                            xaxis_title="Hora",
                            yaxis_title="Enganches Estimados",
                            height=400
                        )

                        st.plotly_chart(fig_eng, use_container_width=True)
                    else:
                        st.info("No se seleccion√≥ estaci√≥n para Enganche.")

            else: # L√≥gica para "Desenganche" o "Enganche" individual
                if selected_station_single:
                    st.markdown(f"#### Predicciones de {prediction_type} para: {selected_station_single}")
                    predictions = []
                    station_id_single = stations_data[selected_station_single]['id']
                    for hour in hours_to_predict:
                        demand = predict_demand_real(
                            station_id_single, selected_date, hour, prediction_type,
                            encoder_plug, model_plug, encoder_unplug, model_unplug,
                            weather_forecast_df
                        )
                        # Eliminamos el nivel de demanda de aqu√≠
                        predictions.append({
                            'Hora': f"{hour:02d}:00",
                            'Demanda': demand,
                            'Tipo': 'üéØ Objetivo' if hour == selected_hour else 'üìç Referencia'
                        })

                    df_results = pd.DataFrame(predictions)
                    # Eliminar la columna 'Nivel' si existe
                    if 'Nivel' in df_results.columns:
                        df_results = df_results.drop(columns=['Nivel'])
                    st.dataframe(df_results, use_container_width=True, hide_index=True)

                    fig = go.Figure()
                    
                    # Colores unificados de azules BiciMAD
                    color_target_single = '#0047AB' # Azul m√°s oscuro para objetivo
                    color_reference_single = '#ADD8E6' # Azul claro para referencia
                    
                    if prediction_type == "Enganche":
                        # Podr√≠amos usar un verde espec√≠fico de BiciMAD o un azul diferente para distinci√≥n visual si se desea
                        # Por ahora, mantendremos la gama de azules pero puedes cambiarlo a un verde.
                        # Ejemplo de verde: color_reference_single = '#28a745'
                        color_reference_single = '#87CEEB' # Otro tono de azul claro para enganche individual
                    
                    colors = [color_target_single if p['Tipo'] == 'üéØ Objetivo' else color_reference_single for p in predictions]


                    fig.add_trace(go.Bar(
                        x=[p['Hora'] for p in predictions],
                        y=[p['Demanda'] for p in predictions],
                        marker_color=colors,
                        text=[f"{p['Demanda']}" for p in predictions], # Eliminado el texto de Nivel
                        textposition='auto',
                        textfont=dict(size=14) # Tama√±o de fuente ligeramente m√°s grande
                    ))

                    fig.update_layout(
                        title=f"Predicci√≥n de {prediction_type} - {selected_station_single}",
                        xaxis_title="Hora",
                        yaxis_title=f"{prediction_type}s Estimados",
                        height=400
                    )

                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("Selecciona una estaci√≥n y presiona 'Generar Predicci√≥n'.")

    else:
        st.markdown("""
        <div style="text-align: center; padding: 3rem; color: #666;">
            <h3>üîÆ Predictor Avanzado</h3>
            <p>Selecciona una estaci√≥n y completa los par√°metros para generar predicciones.</p>
            <p><strong>Nuevas funcionalidades:</strong></p>
            <ul style="text-align: left; max-width: 400px; margin: 0 auto;">
                <li>Predicci√≥n de enganches y desenganches</li>
                <li>B√∫squeda avanzada de estaciones</li>
                <li>Rango configurable de horas (3, 5 o 7)</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    st.markdown("""
    <div class="powerbi-container">
        <h4>üìä Informe Interactivo de Power BI</h4>
        <p>Explora datos adicionales y m√©tricas de rendimiento de BiciMAD.</p>
    </div>
    """, unsafe_allow_html=True)
    
    components.html(power_bi_embed_code, height=600, scrolling=True)


# Footer (sin la secci√≥n de "Estado del Sistema" ni "Datos simulados")
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 1rem;">
    <p>üö¥‚Äç‚ôÇÔ∏è Sistema Avanzado de Predicci√≥n BiciMAD | Desarrollado con Streamlit</p>
</div>
""", unsafe_allow_html=True)